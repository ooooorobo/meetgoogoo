/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * GOOGOO API
 * GOOGOO API Documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import { customInstance } from './shared/lib/custom_instance';
export type LoginKakaoParams = {
code: string;
};

export type UploadImageBody = {
  image: Blob;
};

export type SaveInfoParams = {
linkKey: string;
};

export interface UserInfoResponse {
  name: string;
  profileImage?: string;
  userId: string;
}

export type TownDtoTown = typeof TownDtoTown[keyof typeof TownDtoTown];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TownDtoTown = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export interface TownDto {
  town: TownDtoTown;
  townName: string;
}

export type CityDtoCity = typeof CityDtoCity[keyof typeof CityDtoCity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CityDtoCity = {
  SEOUL: 'SEOUL',
  GYEONGGI: 'GYEONGGI',
  INCHEON: 'INCHEON',
  DAEJEON: 'DAEJEON',
  DAEGU: 'DAEGU',
  BUSAN: 'BUSAN',
  ULSAN: 'ULSAN',
  GWANGJU: 'GWANGJU',
  GANGWON: 'GANGWON',
  SEJONG: 'SEJONG',
  CHUNGCHEONGNAM: 'CHUNGCHEONGNAM',
  CHUNGCHEONGBUK: 'CHUNGCHEONGBUK',
  GYEONGSANGNAM: 'GYEONGSANGNAM',
  GYEONGSANGBUK: 'GYEONGSANGBUK',
  JEOLANAM: 'JEOLANAM',
  JEOLABUK: 'JEOLABUK',
  JEJU: 'JEJU',
} as const;

export interface CityDto {
  city: CityDtoCity;
  cityName: string;
}

export interface CityAndTownResponse {
  city: CityDto;
  town: TownDto[];
}

export type ArchivedInfoResponseMbti = typeof ArchivedInfoResponseMbti[keyof typeof ArchivedInfoResponseMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchivedInfoResponseMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type ArchivedInfoResponseGender = typeof ArchivedInfoResponseGender[keyof typeof ArchivedInfoResponseGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchivedInfoResponseGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface ArchivedInfoResponse {
  birthDate: string;
  drinking: string;
  gender: ArchivedInfoResponseGender;
  height: number;
  hobbies: string[];
  id?: string;
  images: InfoImage[];
  job: Job;
  location: Location;
  mbti?: ArchivedInfoResponseMbti;
  name: string;
  religion: Religion;
  smoking: Smoking;
}

export interface LinkStatusResponse {
  isOpen: boolean;
  linkId: string;
  linkKey: string;
}

export interface ValidateLinkResponse {
  isValid: boolean;
  linkId: string;
}

export type InfoToShareUserInfoMbti = typeof InfoToShareUserInfoMbti[keyof typeof InfoToShareUserInfoMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InfoToShareUserInfoMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type InfoToShareUserInfoGender = typeof InfoToShareUserInfoGender[keyof typeof InfoToShareUserInfoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InfoToShareUserInfoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface InfoToShareUserInfo {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: string;
  foods?: string[];
  gender: InfoToShareUserInfoGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction: string;
  job: Job;
  location: Location;
  mbti?: InfoToShareUserInfoMbti;
  movie?: Movie;
  name: string;
  pets?: string[];
  religion: Religion;
  smoking: Smoking;
}

export interface InfoToShareResponse {
  idealPartner?: InfoToShareIdealPartner;
  sharingId: string;
  userInfo: InfoToShareUserInfo;
}

export interface UserTokenDto {
  accessToken: string;
  refreshToken: string;
}

export interface ImageDto {
  imageId: string;
  url: string;
}

export type UserInfoRequestMbti = typeof UserInfoRequestMbti[keyof typeof UserInfoRequestMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoRequestMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type UserInfoRequestGender = typeof UserInfoRequestGender[keyof typeof UserInfoRequestGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoRequestGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface SaveInfoRequest {
  idealPartner?: IdealPartnerRequest;
  userInfo: UserInfoRequest;
}

export interface SaveSharingResponse {
  sharingId: string;
}

export type SmokingSmokingCategory = typeof SmokingSmokingCategory[keyof typeof SmokingSmokingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SmokingSmokingCategory = {
  NON_SMOKER: 'NON_SMOKER',
  SMOKER: 'SMOKER',
  ETC: 'ETC',
} as const;

export interface Smoking {
  smokingAmount?: string;
  smokingCategory: SmokingSmokingCategory;
}

export type ReligionReligionCategory = typeof ReligionReligionCategory[keyof typeof ReligionReligionCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReligionReligionCategory = {
  CHRISTIANITY: 'CHRISTIANITY',
  CATHOLICISM: 'CATHOLICISM',
  BUDDHISM: 'BUDDHISM',
  IRRELIGION: 'IRRELIGION',
  ETC: 'ETC',
} as const;

export interface Religion {
  religionCategory: ReligionReligionCategory;
  religionName?: string;
}

export interface NumberRange {
  max: number;
  min: number;
}

export interface InfoToShareIdealPartner {
  ageRange?: NumberRange;
  drinking: Drinking;
  heightRange?: NumberRange;
  hobbies: string[];
  images?: InfoImage[];
  location?: Location;
  religion: Religion;
  requiredOptions: string[];
  smoking: Smoking;
  style?: string;
  toMatchMaker: string;
}

export interface Movie {
  cause: string;
  movieName: string;
}

export type LocationTownsItem = typeof LocationTownsItem[keyof typeof LocationTownsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationTownsItem = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export type LocationCitiesItem = typeof LocationCitiesItem[keyof typeof LocationCitiesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocationCitiesItem = {
  SEOUL: 'SEOUL',
  GYEONGGI: 'GYEONGGI',
  INCHEON: 'INCHEON',
  DAEJEON: 'DAEJEON',
  DAEGU: 'DAEGU',
  BUSAN: 'BUSAN',
  ULSAN: 'ULSAN',
  GWANGJU: 'GWANGJU',
  GANGWON: 'GANGWON',
  SEJONG: 'SEJONG',
  CHUNGCHEONGNAM: 'CHUNGCHEONGNAM',
  CHUNGCHEONGBUK: 'CHUNGCHEONGBUK',
  GYEONGSANGNAM: 'GYEONGSANGNAM',
  GYEONGSANGBUK: 'GYEONGSANGBUK',
  JEOLANAM: 'JEOLANAM',
  JEOLABUK: 'JEOLABUK',
  JEJU: 'JEJU',
} as const;

export interface Location {
  cities: LocationCitiesItem[];
  towns: LocationTownsItem[];
}

export type JobJobCategory = typeof JobJobCategory[keyof typeof JobJobCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobJobCategory = {
  STUDENT: 'STUDENT',
  EMPLOYEE: 'EMPLOYEE',
  FREELANCER: 'FREELANCER',
  ETC: 'ETC',
} as const;

export interface Job {
  jobCategory: JobJobCategory;
  jobName: string;
}

export interface InfoImage {
  imageId: string;
  url: string;
}

export interface UserInfoRequest {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: string;
  foods?: string[];
  gender: UserInfoRequestGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction?: string;
  job: Job;
  location: Location;
  mbti?: UserInfoRequestMbti;
  movie?: Movie;
  name: string;
  pets?: string[];
  religion: Religion;
  smoking: Smoking;
}

export type DrinkingDrinkingCategory = typeof DrinkingDrinkingCategory[keyof typeof DrinkingDrinkingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DrinkingDrinkingCategory = {
  NO_PROBLEM: 'NO_PROBLEM',
  ONE_TWO_TIMES_A_WEEK: 'ONE_TWO_TIMES_A_WEEK',
  ONE_TWO_TIMES_A_MONTH: 'ONE_TWO_TIMES_A_MONTH',
  NEVER: 'NEVER',
  ETC: 'ETC',
} as const;

export interface Drinking {
  drinkingAmount?: string;
  drinkingCategory: DrinkingDrinkingCategory;
}

export interface IdealPartnerRequest {
  ageRange?: NumberRange;
  drinking: Drinking;
  heightRange?: NumberRange;
  hobbies: string[];
  images?: InfoImage[];
  location?: Location;
  religion: Religion;
  requiredOptions: string[];
  smoking: Smoking;
  style?: string;
  toMatchMaker: string;
}

export type DetailedInfoUserInfoMbti = typeof DetailedInfoUserInfoMbti[keyof typeof DetailedInfoUserInfoMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoUserInfoMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type DetailedInfoUserInfoGender = typeof DetailedInfoUserInfoGender[keyof typeof DetailedInfoUserInfoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoUserInfoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface DetailedInfoIdealPartner {
  ageRange?: NumberRange;
  drinking: Drinking;
  heightRange?: NumberRange;
  hobbies: string[];
  images?: InfoImage[];
  location?: Location;
  religion: Religion;
  requiredOptions: string[];
  smoking: Smoking;
  style?: string;
  toMatchMaker: string;
}

export interface DetailedInfoDto {
  id: string;
  idealPartner?: DetailedInfoIdealPartner;
  userInfo: DetailedInfoUserInfo;
}

export interface Book {
  bookName: string;
  cause: string;
}

export interface DetailedInfoUserInfo {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: string;
  foods?: string[];
  gender: DetailedInfoUserInfoGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction?: string;
  job: Job;
  location: Location;
  mbti?: DetailedInfoUserInfoMbti;
  movie?: Movie;
  name: string;
  pets?: string[];
  religion: Religion;
  smoking: Smoking;
}

export interface CreateLinkResponse {
  isOpen: boolean;
  linkId: string;
  linkKey: string;
}

export interface Unit { [key: string]: unknown }

export interface UpdateLinkOpenRequest {
  isOpen: boolean;
  linkId: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const updateLinkOpen = (
    updateLinkOpenRequest: UpdateLinkOpenRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/link/link-open`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLinkOpenRequest
    },
      options);
    }
  
export const regenerateLinkKey = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLinkResponse>(
      {url: `/api/v1/link/key`, method: 'PUT'
    },
      options);
    }
  
export const updateInfo = (
    detailedInfoDto: DetailedInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: detailedInfoDto
    },
      options);
    }
  
export const saveSharing = (
    infoId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SaveSharingResponse>(
      {url: `/api/v1/sharing/${infoId}`, method: 'POST'
    },
      options);
    }
  
export const createLink = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLinkResponse>(
      {url: `/api/v1/link`, method: 'POST'
    },
      options);
    }
  
export const saveInfo = (
    saveInfoRequest: SaveInfoRequest,
    params: SaveInfoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info/save`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saveInfoRequest,
        params
    },
      options);
    }
  
export const uploadImage = (
    uploadImageBody: UploadImageBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
formData.append('image', uploadImageBody.image)

      return customInstance<ImageDto>(
      {url: `/api/v1/image/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const refreshToken = (
    userTokenDto: UserTokenDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userTokenDto
    },
      options);
    }
  
export const logout = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/auth/logout`, method: 'POST'
    },
      options);
    }
  
export const getInfoBySharingId = (
    sharingId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<InfoToShareResponse>(
      {url: `/api/v1/sharing/${sharingId}`, method: 'GET'
    },
      options);
    }
  
export const validateLink = (
    linkKey: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ValidateLinkResponse>(
      {url: `/api/v1/link/valid/${linkKey}`, method: 'GET'
    },
      options);
    }
  
export const getLinkByMatchMakerId = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LinkStatusResponse>(
      {url: `/api/v1/link/status`, method: 'GET'
    },
      options);
    }
  
export const getInfo = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DetailedInfoDto>(
      {url: `/api/v1/info/detail/${id}`, method: 'GET'
    },
      options);
    }
  
export const getAllInfo = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArchivedInfoResponse[]>(
      {url: `/api/v1/info/all`, method: 'GET'
    },
      options);
    }
  
export const getAddress = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CityAndTownResponse[]>(
      {url: `/api/v1/info/address`, method: 'GET'
    },
      options);
    }
  
export const loginKakao = (
    params: LoginKakaoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/kakao/login`, method: 'GET',
        params
    },
      options);
    }
  
export const info = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserInfoResponse>(
      {url: `/api/v1/auth/info`, method: 'GET'
    },
      options);
    }
  
export const deleteInfo = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info/${id}`, method: 'DELETE'
    },
      options);
    }
  
export type UpdateLinkOpenResult = NonNullable<Awaited<ReturnType<typeof updateLinkOpen>>>
export type RegenerateLinkKeyResult = NonNullable<Awaited<ReturnType<typeof regenerateLinkKey>>>
export type UpdateInfoResult = NonNullable<Awaited<ReturnType<typeof updateInfo>>>
export type SaveSharingResult = NonNullable<Awaited<ReturnType<typeof saveSharing>>>
export type CreateLinkResult = NonNullable<Awaited<ReturnType<typeof createLink>>>
export type SaveInfoResult = NonNullable<Awaited<ReturnType<typeof saveInfo>>>
export type UploadImageResult = NonNullable<Awaited<ReturnType<typeof uploadImage>>>
export type RefreshTokenResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
export type LogoutResult = NonNullable<Awaited<ReturnType<typeof logout>>>
export type GetInfoBySharingIdResult = NonNullable<Awaited<ReturnType<typeof getInfoBySharingId>>>
export type ValidateLinkResult = NonNullable<Awaited<ReturnType<typeof validateLink>>>
export type GetLinkByMatchMakerIdResult = NonNullable<Awaited<ReturnType<typeof getLinkByMatchMakerId>>>
export type GetInfoResult = NonNullable<Awaited<ReturnType<typeof getInfo>>>
export type GetAllInfoResult = NonNullable<Awaited<ReturnType<typeof getAllInfo>>>
export type GetAddressResult = NonNullable<Awaited<ReturnType<typeof getAddress>>>
export type LoginKakaoResult = NonNullable<Awaited<ReturnType<typeof loginKakao>>>
export type InfoResult = NonNullable<Awaited<ReturnType<typeof info>>>
export type DeleteInfoResult = NonNullable<Awaited<ReturnType<typeof deleteInfo>>>


export const getUpdateLinkOpenResponseMock = (): Unit => ({})

export const getRegenerateLinkKeyResponseMock = (overrideResponse: Partial< CreateLinkResponse > = {}): CreateLinkResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getUpdateInfoResponseMock = (): string => (faker.word.sample())

export const getSaveSharingResponseMock = (overrideResponse: Partial< SaveSharingResponse > = {}): SaveSharingResponse => ({sharingId: faker.word.sample(), ...overrideResponse})

export const getCreateLinkResponseMock = (overrideResponse: Partial< CreateLinkResponse > = {}): CreateLinkResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getSaveInfoResponseMock = (): string => (faker.word.sample())

export const getUploadImageResponseMock = (overrideResponse: Partial< ImageDto > = {}): ImageDto => ({imageId: faker.word.sample(), url: faker.word.sample(), ...overrideResponse})

export const getRefreshTokenResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getLogoutResponseMock = (): Unit => ({})

export const getGetInfoBySharingIdResponseMock = (overrideResponse: Partial< InfoToShareResponse > = {}): InfoToShareResponse => ({idealPartner: faker.helpers.arrayElement([{ageRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NO_PROBLEM','ONE_TWO_TIMES_A_WEEK','ONE_TWO_TIMES_A_MONTH','NEVER','ETC'] as const)}, heightRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), undefined]), location: faker.helpers.arrayElement([{cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, requiredOptions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}, style: faker.helpers.arrayElement([faker.word.sample(), undefined]), toMatchMaker: faker.word.sample()}, undefined]), sharingId: faker.word.sample(), userInfo: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, book: faker.helpers.arrayElement([{bookName: faker.word.sample(), cause: faker.word.sample()}, undefined]), dateStyle: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), drinking: faker.word.sample(), foods: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), introduction: faker.word.sample(), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), movie: faker.helpers.arrayElement([{cause: faker.word.sample(), movieName: faker.word.sample()}, undefined]), name: faker.word.sample(), pets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, ...overrideResponse})

export const getValidateLinkResponseMock = (overrideResponse: Partial< ValidateLinkResponse > = {}): ValidateLinkResponse => ({isValid: faker.datatype.boolean(), linkId: faker.word.sample(), ...overrideResponse})

export const getGetLinkByMatchMakerIdResponseMock = (overrideResponse: Partial< LinkStatusResponse > = {}): LinkStatusResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getGetInfoResponseMock = (overrideResponse: Partial< DetailedInfoDto > = {}): DetailedInfoDto => ({id: faker.word.sample(), idealPartner: faker.helpers.arrayElement([{ageRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NO_PROBLEM','ONE_TWO_TIMES_A_WEEK','ONE_TWO_TIMES_A_MONTH','NEVER','ETC'] as const)}, heightRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), undefined]), location: faker.helpers.arrayElement([{cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, requiredOptions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}, style: faker.helpers.arrayElement([faker.word.sample(), undefined]), toMatchMaker: faker.word.sample()}, undefined]), userInfo: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, book: faker.helpers.arrayElement([{bookName: faker.word.sample(), cause: faker.word.sample()}, undefined]), dateStyle: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), drinking: faker.word.sample(), foods: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), introduction: faker.helpers.arrayElement([faker.word.sample(), undefined]), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), movie: faker.helpers.arrayElement([{cause: faker.word.sample(), movieName: faker.word.sample()}, undefined]), name: faker.word.sample(), pets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, ...overrideResponse})

export const getGetAllInfoResponseMock = (): ArchivedInfoResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, drinking: faker.word.sample(), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), name: faker.word.sample(), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}})))

export const getGetAddressResponseMock = (): CityAndTownResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({city: {city: faker.helpers.arrayElement(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), cityName: faker.word.sample()}, town: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({town: faker.helpers.arrayElement(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const), townName: faker.word.sample()}))})))

export const getLoginKakaoResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getInfoResponseMock = (overrideResponse: Partial< UserInfoResponse > = {}): UserInfoResponse => ({name: faker.word.sample(), profileImage: faker.helpers.arrayElement([faker.word.sample(), undefined]), userId: faker.word.sample(), ...overrideResponse})

export const getDeleteInfoResponseMock = (): string => (faker.word.sample())


export const getUpdateLinkOpenMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.put('*/api/v1/link/link-open', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateLinkOpenResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRegenerateLinkKeyMockHandler = (overrideResponse?: CreateLinkResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CreateLinkResponse> | CreateLinkResponse)) => {
  return http.put('*/api/v1/link/key', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRegenerateLinkKeyResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<string> | string)) => {
  return http.put('*/api/v1/info', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSaveSharingMockHandler = (overrideResponse?: SaveSharingResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SaveSharingResponse> | SaveSharingResponse)) => {
  return http.post('*/api/v1/sharing/:infoId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSaveSharingResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateLinkMockHandler = (overrideResponse?: CreateLinkResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateLinkResponse> | CreateLinkResponse)) => {
  return http.post('*/api/v1/link', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateLinkResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSaveInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/v1/info/save', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSaveInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUploadImageMockHandler = (overrideResponse?: ImageDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ImageDto> | ImageDto)) => {
  return http.post('*/api/v1/image/upload', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUploadImageResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRefreshTokenMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.post('*/api/v1/auth/refresh-token', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRefreshTokenResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLogoutMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.post('*/api/v1/auth/logout', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLogoutResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetInfoBySharingIdMockHandler = (overrideResponse?: InfoToShareResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InfoToShareResponse> | InfoToShareResponse)) => {
  return http.get('*/api/v1/sharing/:sharingId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInfoBySharingIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getValidateLinkMockHandler = (overrideResponse?: ValidateLinkResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ValidateLinkResponse> | ValidateLinkResponse)) => {
  return http.get('*/api/v1/link/valid/:linkKey', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getValidateLinkResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLinkByMatchMakerIdMockHandler = (overrideResponse?: LinkStatusResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LinkStatusResponse> | LinkStatusResponse)) => {
  return http.get('*/api/v1/link/status', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetLinkByMatchMakerIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetInfoMockHandler = (overrideResponse?: DetailedInfoDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DetailedInfoDto> | DetailedInfoDto)) => {
  return http.get('*/api/v1/info/detail/:id', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAllInfoMockHandler = (overrideResponse?: ArchivedInfoResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ArchivedInfoResponse[]> | ArchivedInfoResponse[])) => {
  return http.get('*/api/v1/info/all', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAllInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAddressMockHandler = (overrideResponse?: CityAndTownResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CityAndTownResponse[]> | CityAndTownResponse[])) => {
  return http.get('*/api/v1/info/address', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAddressResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLoginKakaoMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.get('*/api/v1/auth/kakao/login', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginKakaoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getInfoMockHandler = (overrideResponse?: UserInfoResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserInfoResponse> | UserInfoResponse)) => {
  return http.get('*/api/v1/auth/info', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<string> | string)) => {
  return http.delete('*/api/v1/info/:id', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getGoogooApiMock = () => [
  getUpdateLinkOpenMockHandler(),
  getRegenerateLinkKeyMockHandler(),
  getUpdateInfoMockHandler(),
  getSaveSharingMockHandler(),
  getCreateLinkMockHandler(),
  getSaveInfoMockHandler(),
  getUploadImageMockHandler(),
  getRefreshTokenMockHandler(),
  getLogoutMockHandler(),
  getGetInfoBySharingIdMockHandler(),
  getValidateLinkMockHandler(),
  getGetLinkByMatchMakerIdMockHandler(),
  getGetInfoMockHandler(),
  getGetAllInfoMockHandler(),
  getGetAddressMockHandler(),
  getLoginKakaoMockHandler(),
  getInfoMockHandler(),
  getDeleteInfoMockHandler()]
